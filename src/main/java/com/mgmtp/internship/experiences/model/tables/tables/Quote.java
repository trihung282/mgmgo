/*
 * This file is generated by jOOQ.
 */
package com.mgmtp.internship.experiences.model.tables.tables;


import com.mgmtp.internship.experiences.model.tables.Indexes;
import com.mgmtp.internship.experiences.model.tables.Keys;
import com.mgmtp.internship.experiences.model.tables.Public;
import com.mgmtp.internship.experiences.model.tables.tables.records.QuoteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * quote table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quote extends TableImpl<QuoteRecord> {

    private static final long serialVersionUID = 1665793310;

    /**
     * The reference instance of <code>public.quote</code>
     */
    public static final Quote QUOTE = new Quote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuoteRecord> getRecordType() {
        return QuoteRecord.class;
    }

    /**
     * The column <code>public.quote.id</code>.
     */
    public final TableField<QuoteRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('quote_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.quote.title</code>.
     */
    public final TableField<QuoteRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.quote.author</code>.
     */
    public final TableField<QuoteRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.quote.image</code>.
     */
    public final TableField<QuoteRecord, String> IMAGE = createField("image", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.quote</code> table reference
     */
    public Quote() {
        this(DSL.name("quote"), null);
    }

    /**
     * Create an aliased <code>public.quote</code> table reference
     */
    public Quote(String alias) {
        this(DSL.name(alias), QUOTE);
    }

    /**
     * Create an aliased <code>public.quote</code> table reference
     */
    public Quote(Name alias) {
        this(alias, QUOTE);
    }

    private Quote(Name alias, Table<QuoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quote(Name alias, Table<QuoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("quote table"));
    }

    public <O extends Record> Quote(Table<O> child, ForeignKey<O, QuoteRecord> key) {
        super(child, key, QUOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_QUOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuoteRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuoteRecord> getPrimaryKey() {
        return Keys.PK_QUOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuoteRecord>> getKeys() {
        return Arrays.<UniqueKey<QuoteRecord>>asList(Keys.PK_QUOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quote as(String alias) {
        return new Quote(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quote as(Name alias) {
        return new Quote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quote rename(String name) {
        return new Quote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quote rename(Name name) {
        return new Quote(name, null);
    }
}
